import os
import pandas as pd
from datetime import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.mime.text import MIMEText

# ---------------------- CONFIGURATION ----------------------
excel_file = "employee salary.xlsx"  # Excel file containing employee data
company_name = "F.MOTORS"
sender_email = ""  # Replace with your sender email
sender_password = ""  # Replace with your app password
output_folder = "employee_payslips"
os.makedirs(output_folder, exist_ok=True)

# ---------------------- EMAIL FUNCTION ---------------------
def send_email(recipient, subject, body, attachment_path):
    try:
        msg = MIMEMultipart()
        msg["From"] = sender_email
        msg["To"] = recipient
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain"))

        with open(attachment_path, "rb") as f:
            part = MIMEApplication(f.read(), Name=os.path.basename(attachment_path))
            part['Content-Disposition'] = f'attachment; filename="{os.path.basename(attachment_path)}"'
            msg.attach(part)

        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.send_message(msg)

        print(f"üì® Email sent to {recipient}")
    except Exception as e:
        print(f"‚ùå Failed to send email to {recipient}: {e}")

# --------------------- PAYSLIP GENERATOR -------------------
def generate_payslip(employee):
    emp_id = str(employee['Employee ID'])
    name = str(employee['Name'])
    email = str(employee['Email'])
    department = str(employee['Department'])
    basic = float(employee['Basic Salary'])
    allowance = float(employee['Allowance'])
    deductions = float(employee['Deductions'])
    net_salary = basic + allowance - deductions
    current_date = datetime.now().strftime("%d-%m-%Y")
    safe_name = "".join(c for c in name if c.isalnum() or c in " _-")
    filename = os.path.join(output_folder, f"Payslip_{emp_id}_{safe_name}.pdf")

    # Create PDF with professional styling
    c = canvas.Canvas(filename, pagesize=letter)
    width, height = letter

    # Professional Header
    c.setFillColor(colors.HexColor("#003366"))
    c.setFont("Helvetica-Bold", 20)
    c.drawString(50, height - 50, company_name)

    # Document Title
    c.setFont("Helvetica-Bold", 14)
    c.drawCentredString(width / 2, height - 90, "EMPLOYEE PAYSLIP")

    # Employee Information Section
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, height - 120, "Employee Information")
    c.setLineWidth(1)
    c.rect(45, height - 250, width - 90, 110, stroke=1, fill=0)

    c.setFont("Helvetica", 11)
    c.drawString(60, height - 150, f"Employee ID: {emp_id}")
    c.drawString(60, height - 170, f"Name: {name}")
    c.drawString(60, height - 190, f"Email: {email}")
    c.drawString(60, height - 210, f"Department: {department}")
    c.drawString(60, height - 230, f"Date: {current_date}")

    # Salary Breakdown Table
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, height - 280, "Salary Breakdown")

    table_x = 50
    table_y = height - 310
    row_height = 25

    c.setFillColor(colors.HexColor("#f0f0f0"))
    c.rect(table_x, table_y, 500, row_height, fill=1, stroke=0)
    c.setFillColor(colors.black)
    c.setFont("Helvetica-Bold", 11)
    c.drawString(table_x + 10, table_y + 7, "Component")
    c.drawString(table_x + 410, table_y + 7, "Amount ($)")

    table_data = [
        ["Basic Salary", f"{basic:,.2f}"],
        ["Allowance", f"{allowance:,.2f}"],
        ["Deductions", f"-{deductions:,.2f}"],
        ["Net Salary", f"{net_salary:,.2f}"]
    ]

    for i, row in enumerate(table_data):
        y = table_y - (i + 1) * row_height
        c.rect(table_x, y, 500, row_height, stroke=1, fill=0)
        c.drawString(table_x + 10, y + 7, row[0])
        c.drawRightString(table_x + 490, y + 7, row[1])

    # Signature Section
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, 200, "Authorizations")

    c.rect(50, 170, 200, 25, stroke=1, fill=0)
    c.setFont("Helvetica", 10)
    c.drawString(60, 175, "Employee Signature")
    c.drawString(60, 160, f"Name: {name}")
    c.drawString(60, 145, "Date: _____________")

    c.rect(300, 170, 200, 25, stroke=1, fill=0)
    c.setFont("Helvetica", 10)
    c.drawString(310, 175, "HR/Manager Approval")
    c.drawString(310, 160, "Signature: _____________")
    c.drawString(310, 145, "Date: _____________")

    c.setFont("Helvetica-Oblique", 9)
    c.setFillColor(colors.grey)
    c.drawString(50, 40, "This is a computer-generated payslip. Contact HR for inquiries.")
    c.drawString(50, 25, f"Generated by {company_name} | Document ID: {emp_id}")

    c.save()
    print(f"‚úÖ Payslip generated for {name} ({emp_id})")

    # Send email
    subject = f"{company_name} - Payslip for {current_date}"
    body = f"""
Dear {name},

Here is your payslip for the month of {current_date}.

Best regards,
{company_name}
"""
    send_email(email, subject, body, filename)

# -------------------------- MAIN ---------------------------
def main():
    try:
        df = pd.read_excel(excel_file)
        df.columns = df.columns.str.strip()
        required_columns = ['Employee ID', 'Name', 'Email', 'Basic Salary', 'Allowance', 'Deductions', 'Department']
        for col in required_columns:
            if col not in df.columns:
                raise ValueError(f"‚ùå Missing column: {col}")

        # Fill missing departments for the last employee if necessary
        if 'Department' in df.columns and df['Department'].isnull().iloc[-1]:
            df.at[df.index[-1], 'Department'] = 'Not Provided'

        for col in ['Basic Salary', 'Allowance', 'Deductions']:
            df[col] = df[col].apply(lambda x: float(str(x).replace('$', '').replace(',', '').strip()) if isinstance(x, str) else float(x))

        df.fillna(0, inplace=True)

        for _, row in df.iterrows():
            generate_payslip(row)

    except FileNotFoundError:
        print(f"‚ùå Excel file '{excel_file}' not found.")
    except Exception as e:
        print(f"‚ö†Ô∏è Error: {e}")

# Call main if running as script
if __name__ == "__main__":
    main()
